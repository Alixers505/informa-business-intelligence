import hierarchyAliases from "@base-cms/marko-web/utils/hierarchy-aliases";
import queryFragment from "../../graphql/fragments/content-list";
import GAM from "../../../config/gam";
import sectionTargeting from "../../utils/gam/section-targeting";

$ const { id, alias, name, pageNode } = data;

$ const getAdSlots = ({ aliases }) => ({
  "gpt-lb-section-page-main": GAM.getAdUnit({ name: "lb-section-page-main", aliases, targeting: { pos: "728_1_a" } }),
  "gpt-lb-section-page-list": GAM.getAdUnit({ name: "lb-section-page-list", aliases, targeting: { pos: "728_2_a" } }),
  "gpt-mr-section-page-right": GAM.getAdUnit({ name: "mr-section-page", aliases, targeting: { pos: "300_1_rht" } }),
});

<marko-web-website-section-page-layout id=id alias=alias name=name>
  <@head>
    <marko-web-gtm-website-section-context|{ context }| alias=alias>
      <marko-web-gtm-push data=context />
    </marko-web-gtm-website-section-context>
    <marko-web-resolve-page|{ data: section }| node=pageNode>
      <marko-web-gam-targeting key-values=sectionTargeting(section) />
      <marko-web-gam-slots slots=getAdSlots({ aliases: hierarchyAliases(section) }) />
    </marko-web-resolve-page>
  </@head>
  <@page>
    <marko-web-resolve-page|{ data: section, resolved }| node=pageNode>
      $ const aliases = hierarchyAliases(section);
      $ const adSlots = getAdSlots({ aliases });

      <marko-web-gam-display-ad
        id="gpt-lb-section-page-main"
        slots=adSlots
        modifiers=["top-of-page"]
      />
      <marko-web-page-wrapper modifiers=["website-section-header", "top-border"]>
        <@section>
          <default-theme-website-section-breadcrumbs display-self=false section=section />
          <marko-web-website-section-name class="page-wrapper__title" tag="h1" obj=section />

          <marko-web-gam-define-display-ad
            ...GAM.getAdUnit({ name: "sponsored-logo-section-page", aliases })
            modifiers=["sponsored-logo"]
            with-wrapper=true
          />

          <marko-web-website-section-description class="page-wrapper__deck" obj=section />
        </@section>
      </marko-web-page-wrapper>

      $ const children = resolved.getEdgeNodesFor("children");
      <if(section.isRoot && children.length)>
        <marko-web-page-wrapper modifiers=["child-website-section-nav"]>
          <@section>
            <for|child| of=children>
              <marko-web-website-section-name obj=child link=true class="child-website-section-nav-item" />
            </for>
          </@section>
        </marko-web-page-wrapper>
      </if>

      <marko-web-page-wrapper modifiers=["website-section-contents"]>
        <@section>
          <lazarus-skin-page-grid>
            <@left-col>
              <website-global-left-rail-block
                aliases=aliases
                adunit={ name: "mr-section-page", pos: "300_1_lft" }
                query-fragment=queryFragment
              />
            </@left-col>
            <@right-col>
              <@top-row>
                <@left-col>
                  <marko-web-query|{ nodes }|
                    name="website-optioned-content"
                    params={ sectionId: id, optionName: "Pinned", limit: 5, requiresImage: true, queryFragment }
                  >
                    <website-content-hero-flow nodes=nodes>
                      <@header>Highlights</@header>
                    </website-content-hero-flow>
                  </marko-web-query>
                </@left-col>
                <@right-col>
                  <marko-web-gam-display-ad
                    id="gpt-mr-section-page-right"
                    slots=adSlots
                    modifiers=["max-width-300", "sticky-top"]
                  />
                </@right-col>
              </@top-row>
              <@bottom-row>
                <marko-web-query|{ nodes }|
                  name="website-scheduled-content"
                  params={ sectionId: id, limit: 10, skip: 5, queryFragment }
                >
                  <if(nodes.length)>
                    $ const cardNodes = nodes.slice(0, 4);
                    $ const listNodes = nodes.slice(4);
                    <if(cardNodes.length)>
                      <for|node| of=cardNodes>
                        <lazarus-skin-page-grid-col modifiers=["half", "bottom-spacer"]>
                          <website-content-card-node node=node>
                            <@image width=240 use-placeholder=true />
                          </website-content-card-node>
                        </lazarus-skin-page-grid-col>
                      </for>
                    </if>

                    <lazarus-skin-page-grid-col modifiers=["full", "flex", "bottom-spacer"]>
                      <marko-web-gam-display-ad
                        id="gpt-lb-section-page-list"
                        slots=adSlots
                        modifiers=["max-width-728", "margin-auto-x"]
                      />
                    </lazarus-skin-page-grid-col>

                    <if(listNodes.length)>
                      <lazarus-skin-page-grid-col modifiers=["full"]>
                        <website-content-list-flow
                          nodes=listNodes
                          flush-x=true
                          flush-y=true
                          inner-justified=false
                          modifiers=["feed"]
                        >
                          <@node>
                            <@image width=180 />
                          </@node>
                        </website-content-list-flow>
                      </lazarus-skin-page-grid-col>
                    </if>
                  </if>
                </marko-web-query>

                <marko-web-load-more
                  append-to=".page-grid__bottom-row"
                  expand=500
                  component-name="content-load-more-flow"
                  component-input={
                    aliases,
                    adunit: { name: "lb-section-page-list", pos: "728_3_a" }
                  }
                  fragment-name="content-list"
                  query-name="website-scheduled-content"
                  query-params={ sectionId: id, limit: 7, skip: 15 }
                  page-input={ for: "website-section", id }
                />
              </@bottom-row>
            </@right-col>
          </lazarus-skin-page-grid>
        </@section>
      </marko-web-page-wrapper>
    </marko-web-resolve-page>
  </@page>
</marko-web-website-section-page-layout>
