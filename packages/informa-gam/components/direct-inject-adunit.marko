import { getAsArray, getAsObject } from "@base-cms/object-path";
import { warn } from "@base-cms/utils";
import DefineDisplayAd from "@base-cms/marko-web-gam/components/define-display-ad";
import adunitAttrs from "../utils/create-adunit-attrs";

$ const { gam, req } = out.global;
$ const { testAd } = req.query;

$ const loadAdunit = async () => {
  const unitInput = getAsObject(input, "adunit");
  const {
    location,
    context,
    position,
  } = unitInput

  const map = await gam.adunits({ location, context });
  const adunits = map.get(position);
  if (!adunits || !adunits.length) return null;

  // Only allow one adunit to be rendered.
  const adunit = adunits[0];
  return {
    path: adunit.path,
    size: adunit.size,
    sizeMapping: adunit.sizeMapping,
    targeting: ({ ...adunit.targeting, ...unitInput.targeting, ...(testAd && { testAd }) }),
    collapse: unitInput.collapse,
    collapseBeforeAdFetch: unitInput.collapseBeforeAdFetch,
    id: unitInput.id,
    modifiers: unitInput.modifiers,
    applyStyle: unitInput.apply,
    class: unitInput.class,
    withWrapper: unitInput.withWrapper,
    attrs: adunitAttrs({ location, position, context, adunit }),
  };
};

<marko-web-resolve|{ resolved }| promise=loadAdunit()>
  <if(resolved)>
    $ const contents = DefineDisplayAd.renderToString(resolved).replace(/<\/(.+?)>/g, '<\\/$1>');
    <marko-web-browser-component
      name="InformaGAMDirectInjectAdunit"
      props={ selector: input.selector, contents }
    />
  </if>
  <else>
    $ warn(`Unable to directly inject ads: no adunits found.`);
  </else>
</marko-web-resolve>
